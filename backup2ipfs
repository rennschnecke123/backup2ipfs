#!/bin/bash

# by R.Rusch, https://keybase.io/reinerrusch


mode=$1
security=$2

# ipfs+ipns 
ipfsDIR=/ipfs
ipnsDIR=/ipns

# just offer pinning when 10G space free
minFreeSize4Pinning=10485760

IFS=$'\n'


if [ "$mode" != "--help" ] && [ "$mode" != "copy" ] && [ "$mode" != "move" ] && [ "$mode" != "rebuild" ] && [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ] && [ "$mode" != "daemon" ];
then
	mode="--help"
fi


if [ "$mode" == "--help" ];
then
	echo "Syntax:"
	echo "backup2ipfs copy (--secOFF)"
	echo "-> copy data to ipfs"
	echo "backup2ipfs move (--secOFF)"
	echo "-> move data to ipfs"
	echo "backup2ipfs rebuild"
	echo "-> get data from ipfs"
	echo "backup2ipfs pin (--all)"
	echo "-> pin data to local ipfs server"
	echo "backup2ipfs redundancy (--all)"
        echo "-> calculate redundancy of hashes"
	echo "backup2ipfs clean"
        echo "-> clean system/delete very redundant data"
	echo "-> You need to start:"
	echo "-> 'ipfs repo gc' to really delete items from disk!"
	echo ""
	echo "backup2ipfs daemon"
	echo "-> starts backup2ipfs as pinning daemon process"
	echo ""
	echo " for symbolic links ipfs need to be started with mount option!"
	echo " ipfs daemon --mount &"
	echo ""
	echo " to store _non_ gpg files, add '--secOFF' as parameter!"
	exit 0
fi


# daemon mode
function daemonize()
{
	while [ 1 ];
	do
		backup2ipfs pin --all >/dev/null 2>&1
		sleep 3600
		FREE=$(df ~/.ipfs| tail -1 | awk '{print $4}')
                if [ "$FREE" -lt "$minFreeSize4Pinning" ];
		then
			backup2ipfs clean >/dev/null 2>&1
		fi
	done
}
if [ "$mode" == "daemon" ];
then
	daemonsRunning=$(ps axf | grep "backup2ipfs daemon" | grep -v "$$" | grep -v "grep" | wc -l)
	if [ "$daemonsRunning" -gt "1" ] && [ "$security" != "--force" ];
	then
		echo "daemon is already running!"
		echo ""
		exit 0
	fi
	daemonize &
	exit 0
fi




# recreate local list
cp -f ipfs-urls.txt ipfs-urls.txt.tmp && mv -f ipfs-urls.txt.tmp ipfs-urls.txt

# read old urls
urls=$(cat ipfs-urls.txt | grep -v ^\# | grep Qm)

if [ "$mode" != "rebuild" ] && [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ];
then
	# push to ipfs
	# only gpg files!
	if [ "$security" != "--secOFF" ];
	then
		for item in $(find ./ -mindepth 1 -type f -not -name \#\* -name \*.gpg)
		do
			echo $item
			if [ "$mode" == "move" ];
                        then
                                find -mindepth 1 -empty -delete >/dev/null 2>&1
                        fi
			ID=$(ipfs add "$item" 2>/dev/null| tail -n1 | cut -d ' ' -f 2 | grep -v QmbFMke1KXqnYyBBWxB74N4c5SBnJMVAiMNRcGu6x1AwQH)
			if [ "$ID" != "" ];
			then
				echo "done"
				if [ "$mode" == "move" ];
				then
					rm -rf "$item"
				fi
				urls=$(echo -e "$urls\n$ID;$item;https://ipfs.io/ipfs/$ID")
				echo -e "$ID;$item;https://ipfs.io/ipfs/$ID" >> ipfs-urls.txt
			else
				echo "error"
			fi
		done
	else
	# all files!
	        for item in $(find ./ -mindepth 1 -type f -not -name \#\* -not -name ipfs-urls.\*)
        	do
                	echo $item
			if [ "$mode" == "move" ];
                        then
				find -mindepth 1 -empty -delete >/dev/null 2>&1
			fi
	                ID=$(ipfs add "$item" 2>/dev/null| tail -n1 | cut -d ' ' -f 2 | grep -v QmbFMke1KXqnYyBBWxB74N4c5SBnJMVAiMNRcGu6x1AwQH)
        	        if [ "$ID" != "" ];
                	then
                        	echo "done"
	                        if [ "$mode" == "move" ];
        	                then
                	                rm -rf "$item"
                        	fi
	                        urls=$(echo -e "$urls\n$ID;$item;https://ipfs.io/ipfs/$ID")
        	                echo -e "$ID;$item;https://ipfs.io/ipfs/$ID" >> ipfs-urls.txt
                	else
                        	echo "error"
	                fi
        	done
	fi
fi



if [ "$mode" == "move" ] || [ "$mode" == "copy" ];
then
	cat << EOF > ipfs-urls.txt
#######################################################################
# created with backup2ipfs - https://github.com/rennschnecke123/backup2ipfs
# 
# store file on your local system 
# (with installed "backup2ipfs"!! - at /bin/backup2ipfs for example)
#
# then do:
# backup2ipfs rebuild
#
# That's all!
#
#######################################################################
EOF
	echo -e "$urls" | grep Qm | sort | uniq | grep -v QmbFMke1KXqnYyBBWxB74N4c5SBnJMVAiMNRcGu6x1AwQH >> ipfs-urls.txt
	if [ "security" != "--all" ];
	then
		listID=$(ipfs add -rw ipfs-urls.txt 2>/dev/null | tail -n1 | cut -d ' ' -f 2 | grep -v QmbFMke1KXqnYyBBWxB74N4c5SBnJMVAiMNRcGu6x1AwQH)
		cat << EOF > ipfs-urls.html
<html><head>
<script>if (window.location.href != "https://ipfs.io/ipfs/$listID/ipfs-urls.txt") {window.location.href = "https://ipfs.io/ipfs/$listID/ipfs-urls.txt";}</script>
</head><body></body></htnl>
EOF
	fi

fi

# delete empty files
if [ "$mode" == "rebuild" ] || [ "$mode" == "move" ];
then
	find -mindepth 1 -empty -delete >/dev/null 2>&1
fi

if [ "$mode" == "copy" ] || [ "$mode" == "move" ];
then
	# done!
	if [ "$security" != "--all" ];
	then
		firefox ipfs-urls.html >/dev/null 2>&1 &
	fi
	exit 0
fi


if [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ];
then
	# symb links
	for allIDs in $(cat ipfs-urls.txt | grep -v ^\# | sort -R);
	do
		ID=$(echo $allIDs | cut -d';' -f1)
		filePATH=$(echo $allIDs | cut -d';' -f2)
		# rebuild
		if [ "$mode" == "rebuild" ];
		then
#			echo $allIDs
			echo "$filePATH"
			createPATH=$(echo $filePATH | rev | cut -d'/' -f2- | rev)
			mkdir -p "$createPATH" >/dev/null 2>&1
			ipfsRunning=$(ps axf|grep "ipfs"|grep "daemon"|grep -v "backup2ipfs"|wc -l)
			if [ "$ipfsRunning" -gt "0" ];
			then
				wget -nc -nH --cut-dirs=2 -O "$filePATH" "http://localhost:8080/ipfs/$ID" >/dev/null 2>/dev/null 
			else
				wget -nc -nH --cut-dirs=2 -O "$filePATH" "https://ipfs.io/ipfs/$ID" >/dev/null 2>/dev/null
			fi
		fi
		# move
		#if [ "$mode" == "move" ];
                #then
#                       echo $allIDs
                #        echo "$filePATH"
                #        createPATH=$(echo $filePATH | rev | cut -d'/' -f2- | rev)
                #        mkdir -p "$createPATH" >/dev/null 2>&1
                #        (cp -vans "$ipfsDIR/$ID" "$filePATH"  >/dev/null 2>&1)
		#fi
	done
#	if [ "$mode" == "rebuild" ];
#	then
#		find -mindepth 1 -empty -delete >/dev/null 2>&1
#		find -type l -print -exec cp "{}" "{}.tmp" \; -exec mv "{}.tmp" "{}" \;  2>/dev/null
#		find -mindepth 1 -empty -delete >/dev/null 2>&1 &
#	fi
else 
	if [ "$mode" == "pin" ];
	then
		# test for sshpass
		if [ "$(which sshpass)" == "" ];
		then
			echo "You need to install sshpass for pin-exchange:"
			echo " sudo apt install sshpass"
			exit 0
		fi

		hostID=$(ipfs id -f="<id>")
		if [ "$hostID" == "" ];
		then
			echo "ipfs not running?"
			exit 0
		fi

		if [ "$security" == "--all" ];
		then
			countIPFS=$(ipfs pin ls -t recursive -q | wc -l)
		else
			countIPFS=$(cat ipfs-urls.txt | grep Qm | wc -l)
		fi

		if [ "$countIPFS" == "0" ];
                then
                	echo "nothing to exchange!"
	                echo "do a 'backup2ipfs copy' first"
        	        exit 0
                else
                	echo "sharing $countIPFS ipfs hashes to pin"
	                echo "this might take a while to see an effect"
        	        echo "you could test this with:"
			echo "'backup2ipfs redundancy (--all)'"
			echo ""
                fi

		sshpass -p 'duplicity' sftp duplicity@duplicity.duckdns.org:/ >/dev/null 2>&1 << EOF
			get .pin.txt
EOF
		sshpass -p 'duplicity' sftp duplicity@duplicity.duckdns.org:/ >/dev/null 2>&1 << EOF
			get .$hostID.txt
EOF

		FREE=$(df ~/.ipfs| tail -1 | awk '{print $4}')
		maxPinFloat=$(( FREE / $minFreeSize4Pinning ))
		maxPin=${maxPinFloat%.*}
		if [ "$countIPFS" -gt "$maxPin" ];
		then
			countIPFS=$maxPin
		fi
	
		echo "$countIPFS hashes to re-pin"
		echo "$FREE space free"
		echo "$minFreeSize4Pinning space needed"


		if [ "$FREE" -gt "$minFreeSize4Pinning" ];
		then
			echo "start"
			for data in $(cat .pin.txt | cut -d ";" -f1 | grep Qm | sort -R| uniq| head -n $countIPFS | sed "s/\\\"//g");
                        do
                        	echo "found $data"
	                        FREE=$(df ~/.ipfs| tail -1 | awk '{print $4}')
        	                FREEdaemon=$(( FREE / 10 ))
                	        daemonsRunning=$(ps axf | grep "backup2ipfs daemon" | grep -v "$$" | grep -v "grep" | wc -l)
                        	if [ "$daemonsRunning" -lt "1" ];
	                        then
        		                # manual mode
                        		echo "queue pinning"
		                        if [ "$FREE" -gt "$minFreeSize4Pinning" ];
                		        then
			                        flock /tmp/pinExchange.flock timeout 3600 ipfs pin add $data >/dev/null 2>&1 &
                        		fi
	                        else
        		                # daemon mode
                        		echo "daemon pinning"
		                        if [ "$FREEdaemon" -gt "$minFreeSize4Pinning" ];
                		        then
			                        timeout 3600 ipfs pin add $data
                        		else
			                        timeout 3600 ipfs pin add $data
                        			ipfs pin rm $data
		                        fi
                	        fi
                        done
			echo "stop"
		else
			echo "not enough space to re-pin"
		fi
	 

		if [ "$security" == "--all" ];
		then
			ipfs pin ls -t recursive -q >> .$hostID.txt
		else
			cat ipfs-urls.txt | cut -d ";" -f1  | grep Qm | sed 's/\"//g' | sort | uniq >> .$hostID.txt
		fi

		sshpass -p 'duplicity' sftp duplicity@duplicity.duckdns.org:/ >/dev/null 2>&1 << EOF
			put .$hostID.txt
EOF
		rm -f .pin.txt >/dev/null 2>&1
		rm -f .$hostID.txt >/dev/null 2>&1
	

	else
		if [ "$mode" == "redundancy" ];
		then
			if [ "$security" == "--all" ];
			then
				for data in $(ipfs pin ls -t recursive -q);
		        	do
        		       		echo $data;
					echo "Redundancy: "$(timeout 60 ipfs dht findprovs $data 2>/dev/null | wc -l)
					echo ""
			       	done
			else
				for data in $(cat ipfs-urls.txt | cut -d ";" -f1 | grep Qm | sort -R| uniq | sed "s/\\\"//g");
                                do
                                        echo $data;
                                        echo "Redundancy: "$(timeout 60 ipfs dht findprovs $data 2>/dev/null | wc -l)
                                        echo ""
                                done
			fi
		else # clean system
			for data in $(ipfs pin ls -t recursive -q);
			do
				echo $data;
				redundancy=$(timeout 60 ipfs dht findprovs -n 2 $data 2>/dev/null | wc -l)
        	                if [ "$redundancy" -gt "2" ];
				then
					echo "deleted"
						ipfs pin rm $data >/dev/null 2>&1
				else
					echo "not touched"
				fi
			done
		fi
	fi
fi

