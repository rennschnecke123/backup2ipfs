#!/bin/bash

# by R.Rusch, https://keybase.io/reinerrusch


mode=$1
security=$2

# ipfs+ipns 
ipfsDIR=/ipfs
ipnsDIR=/ipns


IFS=$'\n'

if [ "$mode" != "--help" ] && [ "$mode" != "copy" ] && [ "$mode" != "move" ] && [ "$mode" != "rebuild" ] && [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ];
then
	mode="--help"
fi


if [ "$mode" == "--help" ];
then
	echo "Syntax:"
	echo "backup2ipfs copy"
	echo "-> copy data to ipfs"
	echo "backup2ipfs move (with attempt to symb link)"
	echo "-> move data to ipfs"
	echo "backup2ipfs rebuild"
	echo "-> get data from ipfs"
	echo "backup2ipfs pin"
	echo "-> pin data to local ipfs server"
	echo "backup2ipfs redundancy"
        echo "-> calculate redundancy of hashes"
	echo "backup2ipfs clean"
        echo "-> clean system/delete very redundant data"
	echo "-> You need to start:"
	echo "-> 'ipfs repo gc' to really delete items from disk!"
	echo ""
	echo " for symbolic links ipfs need to be started with mount option!"
	echo " ipfs daemon --mount &"
	echo ""
	echo " to store _non_ gpg files, add '--secOFF' as parameter!"
	exit 0
fi



# recreate local list
cp -f ipfs-urls.txt ipfs-urls.txt.tmp && mv -f ipfs-urls.txt.tmp ipfs-urls.txt

# read old urls
urls=$(cat ipfs-urls.txt | grep -v ^\# | grep Qm)

if [ "$mode" != "rebuild" ] && [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ];
then
	# push to ipfs
	# only gpg files!
	if [ "$security" != "--secOFF" ];
	then
		for item in $(find ./ -mindepth 1 -type f -not -name \#\* -name \*.gpg)
		do
			echo $item
			ID=$(ipfs add "$item" 2>/dev/null| tail -n1 | cut -d ' ' -f 2)
			if [ "$ID" != "" ];
			then
				echo "done"
				if [ "$mode" == "move" ];
				then
					rm -rf "$item"
				fi
				urls=$(echo -e "$urls\n$ID;$item")
				echo "$ID;$item" >> ipfs-urls.txt
			else
				echo "error"
			fi
		done
	else
	# all files!
	        for item in $(find ./ -mindepth 1 -type f -not -name \#\* -not -name ipfs-urls.txt)
        	do
                	echo $item
	                ID=$(ipfs add "$item" 2>/dev/null| tail -n1 | cut -d ' ' -f 2)
        	        if [ "$ID" != "" ];
                	then
                        	echo "done"
	                        if [ "$mode" == "move" ];
        	                then
                	                rm -rf "$item"
                        	fi
	                        urls=$(echo -e "$urls\n$ID;$item")
        	                echo "$ID;$item" >> ipfs-urls.txt
                	else
                        	echo "error"
	                fi
        	done
	fi
fi

cat << EOF > ipfs-urls.txt
#######################################################################
# created with backup2ipfs - https://github.com/rennschnecke123/backup2ipfs
# 
# store file on your local system 
# (with installed "backup2ipfs"!! - at /bin/backup2ipfs for example)
#
# then do:
# backup2ipfs rebuild
#
# That's all!
#
#######################################################################
EOF
echo -e "$urls" | sort | uniq >> ipfs-urls.txt


if [ "$mode" != "pin" ] && [ "$mode" != "redundancy" ] && [ "$mode" != "clean" ];
then
	# symb links
	for allIDs in $(cat ipfs-urls.txt | grep -v ^\#);
	do
		ID=$(echo $allIDs | cut -d';' -f1)
		filePATH=$(echo $allIDs | cut -d';' -f2)
		# rebuild
		if [ "$mode" == "rebuild" ];
		then
			echo $allIDs
			echo "$filePATH"
			createPATH=$(echo $filePATH | rev | cut -d'/' -f2- | rev)
			mkdir -p "$createPATH" >/dev/null 2>&1
			(wget -nc -nH --cut-dirs=2 -O "$filePATH" "http://localhost:8080/ipfs/$ID" >/dev/null 2>/dev/null) || (wget -nc -nH --cut-dirs=2 -O "$filePATH" "https://ipfs.io/ipfs/$ID" >/dev/null 2>/dev/null)
		fi
		# move
		if [ "$mode" == "move" ];
                then
                        echo $allIDs
                        echo "$filePATH"
                        createPATH=$(echo $filePATH | rev | cut -d'/' -f2- | rev)
                        mkdir -p "$createPATH" >/dev/null 2>&1
                        (cp -vans "$ipfsDIR/$ID" "$filePATH"  >/dev/null 2>&1)
		fi
	done
	if [ "$mode" == "rebuild" ];
	then
		find -type l -print -exec cp "{}" "{}.tmp" \; -exec mv "{}.tmp" "{}" \;  2>/dev/null
	fi
else 
	if [ "$mode" == "pin" ];
	then
		hostID=$(ipfs id -f="<id>")
		countIPFS=$(cat ipfs-urls.txt | grep Qm | wc -l)
		if [ "$countIPFS" == "0" ];
		then
			echo "nothing to exchange!"
			echo "do a 'backup2ipfs copy' first"
			exit 0
		else
			echo "sharing $countIPFS ipfs hashes to pin"
			echo "this might take a while to see an effect"
			echo "you could test this with:"
			echo "backup2ipfs redundancy"
		fi
		lftp -e "get -e /.pin.txt; bye" -u duplicity,duplicity sftp://duplicity.duckdns.org >/dev/null 2>&1
		lftp -e "get -e /.$hostID.txt; bye" -u duplicity,duplicity sftp://duplicity.duckdns.org >/dev/null 2>&1
		for data in $(cat .pin.txt | cut -d ";" -f1 | grep Qm | sort -R| uniq| head -n $countIPFS | sed "s/\\\"//g");
		do
			flock /tmp/pinExchange.flock timeout 3600 ipfs pin add $data >/dev/null 2>&1 &
		done
		cat ipfs-urls.txt | cut -d ";" -f1  | grep Qm | sed 's/\"//g' | sort | uniq >> .$hostID.txt
		lftp -e "put -e -O / .$hostID.txt; bye" -u duplicity,duplicity sftp://duplicity.duckdns.org >/dev/null 2>&1
		rm -f .pin.txt >/dev/null 2>&1
		rm -f .$hostID.txt >/dev/null 2>&1
	

	else
		if [ "$mode" == "redundancy" ];
		then
			for data in $(cat ipfs-urls.txt | cut -d ";" -f1 | grep Qm | sort -R| uniq | sed "s/\\\"//g");
        		do
                		echo $data;
				echo "Redundancy: "$(timeout 60 ipfs dht findprovs $data | wc -l)
				echo ""
	        	done
		else # clean system
			for data in $(ipfs pin ls -t recursive -q);
			do
				echo $data;
				redundancy=$(timeout 60 ipfs dht findprovs -n 2 $data | wc -l)
                                if [ "$redundancy" -gt "1" ];
				then
					echo "deleted"
					ipfs pin rm $data >/dev/null 2>&1
				else
					echo "not touched"
				fi
			done
		fi
	fi
fi

